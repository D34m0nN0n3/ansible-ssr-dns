{%- import '_macros.j2' as macros with context -%}
{% if bind_root_ipv4_static is defined %}
{% set root_list_ip4 = bind_root_ipv4_static.split(',') %}
{% endif -%}
{% set list_slaves = ip_slaves.split(',') %}
// Change the version that BIND reports when queried for version.bind: https://kb.isc.org/docs/aa-00359
// How share a dynamic zone between multiple views: https://kb.isc.org/docs/aa-00295
// Response Policy Zones (RPZ): https://kb.isc.org/docs/aa-00525
//
{% if bind_srv_type == "localroot" | string() %}
// For RECURSIVE (caching) DNS server. RFC7706
view "local_root" {
      match-destinations { authorized_networks; };
      zone "." {
          type slave;
          file "rootzone.db";
          notify no;
          masters {
              192.228.79.201; # b.root-servers.net
              192.33.4.12;    # c.root-servers.net
              192.5.5.241;    # f.root-servers.net
              192.112.36.4;   # g.root-servers.net
              193.0.14.129;   # k.root-servers.net
              192.0.47.132;   # xfr.cjr.dns.icann.org
              192.0.32.132;   # xfr.lax.dns.icann.org
              2001:500:84::b; # b.root-servers.net
              2001:500:2f::f; # f.root-servers.net
              2001:7fd::1;    # k.root-servers.net
              2620:0:2830:202::132;  # xfr.cjr.dns.icann.org
              2620:0:2d0:202::132;  # xfr.lax.dns.icann.org
          };
      };
};
{% endif %}
{% if bind_srv_type == "resolver" | string() or bind_srv_type == "mixed" | string() %}
view "internal" {
      match-clients { internal; };
      allow-query { internal; };
      allow-query-on { internal; };
      allow-update { trusted_servers; };
      allow-notify { trusted_servers; };
      allow-transfer { trusted_servers; };
      allow-recursion { internal; };
      recursion yes;
{%  if bind_forwarders is defined %}
      forward first;
      {%   if bind_forwarders | length > 0 %}forwarders { {{ bind_forwarders | join('; ') }}; };{%   endif %}
{%  endif %}

      dnssec-validation no;

      rate-limit {
                 slip 2; // Every other response truncated
                 window 15; // Seconds to bucket
                 responses-per-second 15; // Numbers of good responses per prefix-length/sec
                 referrals-per-second 5; // "referral" responses
                 nodata-per-second 5; // "nodata" responses
                 nxdomains-per-second 5; // "nxdomain" responses
                 errors-per-second 5; // "error" responses
                 all-per-second 20; // When we drop all
                 ipv4-prefix-length 24; // Define the IPv4 block size
                 ipv6-prefix-length 56; // Define the IPv6 block size
                 max-table-size 200000; // 40 bytes * this number = max memory
                 min-table-size 500; // pre-allocate to speed startup
                 log-only yes; // Debugging mode
                 };

      response-policy { zone "rpz.passeddomain.hosts" policy passthru; 
                        zone "rpz.changeddomain.hosts" policy given;
                        zone "rpz.blockeddomain.hosts" policy nxdomain;
                        };

zone "rpz.passeddomain.hosts" IN {
{%   if inventory_hostname in groups['dynamic_group_master'] %}
      type master;
{%   else %}
      type slave;
{%   endif %}
      file "/var/named/rpz.passeddomain.hosts";
{%   if inventory_hostname in groups['dynamic_group_master'] %}
      allow-update { none; };
      notify yes;
{%   else %}
      masters { {{ ip_master }}; };
      allow-transfer { none; };
{%   endif %}
      };

zone "rpz.changeddomain.hosts" IN {
{%   if inventory_hostname in groups['dynamic_group_master'] %}
      type master;
{%   else %}
      type slave;
{%   endif %}
      file "/var/named/rpz.changeddomain.hosts";
{%   if inventory_hostname in groups['dynamic_group_master'] %}
      allow-update { none; };
      notify yes;
{%   else %}
      masters { {{ ip_master }}; };
      allow-transfer { none; };
{%   endif %}
      };

zone "rpz.blockeddomain.hosts" IN {
{%   if inventory_hostname in groups['dynamic_group_master'] %}
      type master;
{%   else %}
      type slave;
{%   endif %}
      file "/var/named/rpz.blockeddomain.hosts";
{%   if inventory_hostname in groups['dynamic_group_master'] %}
      allow-update { none; };
      notify yes;
{%   else %}
      masters { {{ ip_master }}; };
      allow-transfer { none; };
{%   endif %}
      };

{%    if bind_localroot_resolv is defined and bind_localroot_resolv is sameas true %}
// For RECURSIVE (caching) DNS clients. RFC7706
    zone "." {
        type static-stub;
        server-addresses { {% for local_root_ip4 in root_list_ip4 %}{{ local_root_ip4 }}; {% endfor %} };
    };
{%    else %}
zone "." IN {
      type hint;
      file "named.ca";
      };
{%    endif %}

include          "/etc/named.rfc1912.zones";
{%  if bind_srv_type == "mixed" | string() %}
include          "/etc/named/zones-internal.conf";
{%  endif %}
};
{% endif %}

{% if bind_srv_type == "authorized" | string() or bind_srv_type == "mixed" | string() %}
view "external" {
      match-clients { external; };
      allow-query { external; };
      allow-query-on { external; };
      allow-query-cache { none; };
      allow-query-cache-on { none; };
      allow-update { trusted_servers; };
      allow-notify { trusted_servers; };
      allow-transfer { trusted_servers; };
      recursion no;
{%  if alt_tranfer_src is defined and alt_tranfer_src is sameas true %}
      use-alt-transfer-source yes;
{%  endif %}

      dnssec-validation yes;

      rate-limit {
                 responses-per-second 250;// Numbers of good responses per prefix-length/sec
                 nodata-per-second 25; // "nodata" responses
                 nxdomains-per-second 25; // "nxdomain" responses
                 errors-per-second 25; // "error" responses
                 log-only no; // Debugging mode
                 };

include          "/etc/named/zones-external.conf";
};
{% endif %}

//END
