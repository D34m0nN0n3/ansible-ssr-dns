---
- name: Create dynamic groups for master, slaves and new slaves (Set facts)
  block:
    - name: Dynamic group for new slaves
      group_by:
        key: dynamic_group_new_slaves
      when: (new_slave is defined and new_slave | bool  == true ) or
            ('new_slaves' in groups and groups['new_slaves']) and inventory_hostname in groups['new_slaves']

    - name: Dynamic group for master
      group_by:
        key: dynamic_group_master
      when: (bind_srv_role is defined and bind_srv_role == 'master') or
            ('master' in groups and groups['master']) and inventory_hostname in groups['master']

    - name: Dynamic group for slaves
      group_by:
        key: dynamic_group_slaves
      when: (bind_srv_role is defined and bind_srv_role == 'slave') or
            ('slaves' in groups and groups['slaves']) and inventory_hostname in groups['slaves']

    - name: Dynamic group for all slaves
      group_by:
        key: dynamic_group_all_slaves
      when: (('dynamic_group_slaves' in groups and groups['dynamic_group_slaves']) and (inventory_hostname in groups['dynamic_group_slaves'])) or (('dynamic_group_new_slaves' in groups and groups['dynamic_group_new_slaves']) and (inventory_hostname in groups['dynamic_group_new_slaves']))

    - name: Add server role for new host
      set_fact:
        bind_srv_role: slave
      when: ('dynamic_group_new_slaves' in groups and groups['dynamic_group_new_slaves']) and inventory_hostname in groups['dynamic_group_new_slaves'] and bind_srv_role is undefined

    - name: Get all IPv4 for trust_servers ACL
      set_fact:
        trust_servers_dynamic: "{% for host in groups['all'] %}{{ hostvars[host].ansible_all_ipv4_addresses }}{% if not loop.last %},{% endif %}{% endfor %}"
        cacheable: no

    - name: Get new slaves hostname for NS RR
      set_fact:
        hostname_fqdn_dynamic: "{% for host in groups['dynamic_group_new_slaves'] %}{{ hostvars[host]['ansible_fqdn'] }}{% if not loop.last %},{% endif %}{% endfor %}"
        cacheable: no

    - name: Set array new slaves hostname
      set_fact:
        new_slave_hosts: "{{ new_slave_hosts | default([]) }} + [ '{{ item }}' ]"
      with_items: "{{ hostname_fqdn_dynamic }}"

- name: Include tasks for install ISC BIND
  include: install.yml
  static: yes
  when: ('dynamic_group_new_slaves' in groups and groups['dynamic_group_new_slaves']) and inventory_hostname in groups['dynamic_group_new_slaves']

- name: Create backup
  service:
    name: bind-backup-incremental.service
    state: started

- name: Check IPv6
  block:
    - name: Check if IPv6 disabled at grub command line
      slurp:
        src: /proc/cmdline
      register: cmdline

    - name: Check ip6 support
      stat:
        path: /proc/sys/net/ipv6
      register: proc_ip6

    - name: IPv6 is enabled on the node
      set_fact:
        bind_ip_v6_on: true
        cacheable: no
      register: ip_v6_on
      when: proc_ip6.stat.exists or (ansible_system == 'Linux' and not "ipv6.disable=1" in cmdline.content|b64decode)

    - name: IPv6 is disabled on the node
      set_fact:
        bind_ip_v6_on: false
        cacheable: no
      when: ip_v6_on.skipped
  when: bind_ip_v6_on is undefined

- name: Configure new hosts ane reconfigure exist host
  block:
    - name: Change config for run IPv4 only if IPv6 disabled
      lineinfile:
        path: /etc/sysconfig/named
        line: 'OPTIONS="-4"'
      when: bind_ip_v6_on | bool == false

    - name: Copy main config
      template:
        src: named.conf.j2
        dest: /etc/named.conf
        owner: root
        group: named
        mode: "0650"
        setype: named_conf_t
        backup: yes

    - name: Copy options template file
      template:
        src: options.conf.j2
        dest: /etc/named/options.conf
        owner: root
        group: named
        mode: "0650"
        setype: named_conf_t
  when: ('dynamic_group_new_slaves' in groups and groups['dynamic_group_new_slaves']) and inventory_hostname in groups['dynamic_group_new_slaves']

- name: Copy ACL rules template file
  template:
    src: acl-list.conf.j2
    dest: /etc/named/acl-list.conf
    owner: root
    group: named
    mode: "0650"
    setype: named_conf_t

- name: Adding new nodes to the zone files
  block:
    - name: Set files list
      set_fact:
        zone_files: "{{ lookup('fileglob', '/var/named/masters/*', wantlist=True) | flatten }}"
        cacheable: no

    - name: Set RR list
      set_fact:
        ns_rr: "{{ new_slave_hosts | flatten }}"
        cacheable: no

    - name: Add records to files
      lineinfile:
        dest: "{{ item.0 }}"
        state: present
        insertbefore: '.*NS\s*\S{4,24}'
        line: "                        IN  NS     {{ item.1 }}."
        firstmatch: yes
      loop: "{{ zone_files | product(ns_rr) | list }}"
      when: ('dynamic_group_master' in groups and groups['dynamic_group_master']) and inventory_hostname in groups['dynamic_group_master']

- name: Create temporary directory
  tempfile:
    state: directory
    suffix: _configs
  register: tempdir_conf
  delegate_to: localhost
  run_once: true

- name: Get config files from slave to temporary directory
  fetch:
    src:  "{{ item }}"
    dest: "{{ tempdir_conf.path }}/"
    flat: yes
  with_fileglob: /etc/named/*
  when: new_slave is undefined and
        ('dynamic_group_slaves' in groups and groups['dynamic_group_slaves']) and (inventory_hostname not in groups['dynamic_group_new_slaves'] and inventory_hostname in groups[['dynamic_group_slaves'][0]])

- name: Remove configs from temporary directory (automate gen)
  file:
    path: "{{ tempdir_conf.path }}/{{ item }}"
    state: absent
  loop:
    - acl-list.conf
    - options.conf
  delegate_to: localhost
  run_once: true

- name: Copy configs on new slaves
  copy:
    src:  "{{ item }}"
    dest: "/etc/named/{{ item | basename }}"
  with_fileglob: "{{ tempdir_conf.path }}/*"
  when: ('dynamic_group_new_slaves' in groups and groups['dynamic_group_new_slaves']) and inventory_hostname in groups['dynamic_group_new_slaves']

- name: Recursively change ownership of a directory
  file:
    path: /etc/named
    state: directory
    recurse: yes
    owner: root
    group: named
    mode: "0640"
    setype: named_conf_t
  when: ('dynamic_group_new_slaves' in groups and groups['dynamic_group_new_slaves']) and inventory_hostname in groups['dynamic_group_new_slaves']

- name: Change ownership of a directory
  file:
    path: /etc/named
    state: directory
    owner: root
    group: named
    mode: "0650"
  when: ('dynamic_group_new_slaves' in groups and groups['dynamic_group_new_slaves']) and inventory_hostname in groups['dynamic_group_new_slaves']

- name: Delete temporary directory
  file:    
    path: "{{ tempdir_conf.path }}"
    state: absent
  delegate_to: localhost
  run_once: true

- name: Copy configuration files
  block:
    - name: Get rndc.key
      set_fact:
        rndc_key_gen: "{{ lookup('file', '/etc/rndc.key') }}"
        cacheable: no
      delegate_facts: true
      when: groups[['dynamic_group_slaves'][0]]

    - name: Copy configuration files
      copy:
        content: "{{ rndc_key_gen }}"
        dest: "/etc/rndc.key"
        mode: "0750"
        owner: root
        group: named
      changed_when: false
  when: ('dynamic_group_all_slaves' in groups and groups['dynamic_group_all_slaves']) and inventory_hostname in groups['dynamic_group_all_slaves']

- name: Enable services on new slaves
  block:
    - name: Enable service ISC BIND and ensure it is not masked
      systemd:
        name: named-chroot
        state: started
        enabled: yes
        masked: no

    - name: Enable bind_exporter service
      systemd:
        name: bind_exporter
        state: started
        enabled: yes
        masked: no

    - name: Enable node_exporter service
      systemd:
        name: node_exporter
        state: started
        enabled: yes
        masked: no
  when: ('dynamic_group_new_slaves' in groups and groups['dynamic_group_new_slaves']) and inventory_hostname in groups['dynamic_group_new_slaves'] 

- name: Reload new configuration file on all hosts
  command:
    cmd: /usr/sbin/rndc reload
  throttle: 1

- name: Include task for generate ans send mail report
  include: report.yml
  when: mail_host is defined and (mail_rcpt_to is defined or bind_cont_mail is defined)

- name: Finish play
  meta: end_play
...
